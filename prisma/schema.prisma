// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(500)
  lastName  String   @db.VarChar(500)
  userName  String   @unique
  password  String   @db.VarChar(500)
  gender    String   @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Games     Game[]
  Comments  Comment[]
  Rankings  Ranking[]
}

model Game {
  id        Int      @id @default(autoincrement())
  playerId  Int
  score     Int
  levelId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Level     Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model Level {
  id         Int      @id @default(autoincrement())
  name       String
  difficulty String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Games      Game[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  playerId  Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Ranking {
  id        Int      @id @default(autoincrement())
  playerId  Int
  scores    Int
  rank      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}
